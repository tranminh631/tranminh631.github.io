{"version":3,"sources":["Profile Pic.png","Welcome.js","Bio.js","Skills.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","className","Bio","src","Profile","alt","Skills","Contact","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,yC,0OCc5BC,MAXf,WACC,OACC,yBAAKC,UAAU,kBACd,wDACA,gFACA,kEACA,0DAA+B,uC,sBCUnBC,MAff,WACC,OACC,yBAAKD,UAAU,cACd,6BAAK,yBAAKE,IAAKC,IAASC,IAAI,aAC5B,6BACC,mEAAwC,0CAAxC,kDAC+D,iEAD/D,6CAE8D,oDAF9D,0D,MCKWC,MAXf,WACC,OACC,yBAAKL,UAAU,iBACd,sCACA,2BAAG,oCAAH,6CACA,uBAAGA,UAAU,QAAb,4EACA,2BAAG,mCAAH,6C,MCQYM,MAdf,WACC,OACC,yBAAKN,UAAU,kBACd,uCACA,oDACA,2DACA,uBAAGO,KAAK,mDAAmDC,OAAO,SACjEC,IAAI,uBADL,YAEA,uBAAGF,KAAK,uDAAuDC,OAAO,SACrEC,IAAI,uBADL,kBCWYC,MAdf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAAlB,QAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf5cfbbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile Pic.6793498b.png\";","import React from 'react';\r\nimport './Welcome.css'\r\n\r\nfunction Welcome() {\r\n\treturn (\r\n\t\t<div className=\"Welcome module\">\r\n\t\t\t<p>Welcome to Minh's Website</p>\r\n\t\t\t<p>The premier place for information about Minh Tran</p>\r\n\t\t\t<p>Software Developer from Herndon, VA</p>\r\n\t\t\t<p>This website is built using <b>React</b></p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport Profile from './Profile Pic.png'\r\nimport './Bio.css'\r\n\r\nfunction Bio() {\r\n\treturn(\r\n\t\t<div className=\"Bio module\">\r\n\t\t\t<div><img src={Profile} alt=\"Profile\"/></div>\r\n\t\t\t<div>\r\n\t\t\t\t<p>Software Developer in Test with over <b>\r\n\t\t\t\t\tthree years</b> of experience. Web development skills include <b>Cypress, Selenium,\r\n\t\t\t\t\tNode, and React</b>. Highest traffic site ever worked on was <b>Special Olympics 2017</b> website,\r\n\t\t\t\t\twhich got over 1 million hits in an hour.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Bio;","import React from 'react';\r\nimport './Skills.css'\r\n\r\nfunction Skills() {\r\n\treturn(\r\n\t\t<div className=\"Skills module\">\r\n\t\t\t<h2>Skills</h2>\r\n\t\t\t<p><b>React</b> web developer with responsive experience</p>\r\n\t\t\t<p className=\"note\">Note: Please feel free to resize this page or visit via phone or tablet.</p>\r\n\t\t\t<p><b>Java</b> developer in test. (Examples incoming)</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Skills;","import React from 'react';\r\nimport './Contact.css';\r\n\r\nfunction Contact() {\r\n\treturn(\r\n\t\t<div className=\"Contact module\">\r\n\t\t\t<h2>Contact</h2>\r\n\t\t\t<p>tranminh631@gmail.com</p>\r\n\t\t\t<p>Located in Herndon, Virginia</p>\r\n\t\t\t<a href=\"https://www.linkedin.com/in/minh-tran-aba04a127/\" target=\"_blank\"\r\n\t\t\t\trel=\"noopener noreferrer\">LinkedIn</a>\r\n\t\t\t<a href=\"https://github.com/tranminh631/tranminh631.github.io\" target=\"_blank\"\r\n\t\t\t\trel=\"noopener noreferrer\">Website Repo</a>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contact;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Welcome from './Welcome';\nimport Bio from './Bio';\nimport Skills from './Skills';\nimport Contact from './Contact';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Minh\n      </header>\n      <Welcome />\n      <Bio />\n      <Skills />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}